Intrusion Detection & Prevention Systems
    Placement
        In line
        or not
    Recognition Methods
        Signature
        Heuristic aka Behavioral
        
    
    SNORT
    [action] [protocol] [s.ip] [s.port] [direction] [d.ip] [d.port] ( match conditions ;)
        Action - such as alert, log, pass, drop, reject
        Protocol - includes TCP, UDP, ICMP and others
        Source IP address - single address, CIDR notation, range, or any
        Source Port - one, multiple, any, or range of ports
        Direction - either inbound or in and outbound
        Destination IP address - options mirror Source IP
        Destination port - options mirror Source port
        
    Snort IDS/IPS General rule options:
        msg - specifies the human-readable alert message
        reference - links to external source of the rule
        sid - used to uniquely identify Snort rules
        rev - uniquely identify revisions of Snort rules
            higher revision number = highest priority
        Classtype - used to describe what a successful attack would do
        priority - level of concern (1 - really bad, 2 - badish, 3 - informational) (how to categorize alerts)
        metadata - allows a rule writer to embed additional information about the rule
        
    Snort IDS/IPS Payload detection options:
        content - looks for a string of text.
        |binary data| - to look for a string of binary HEX
        nocase - modified content, makes it case insensitive
        depth - specify how many bytes into a packet Snort should search for the specified pattern
        distance - how far into a packet Snort should ignore before starting to search for the specified pattern relative to the end of the previous pattern match
        within - modifier that makes sure that at most N bytes are between pattern matches using the content keyword
        offset - skips a certain number of bytes before searching (i.e. offset: 12)
        
    Snort IDS/IPS Non-Payload detection options:
        Flow - direction (to/from client and server) and state of connection (established, stateless, stream/no stream)
        ttl - The ttl keyword is used to check the IP time-to-live value.
        tos - The tos keyword is used to check the IP TOS field for a specific value.
        ipopts - The ipopts keyword is used to check if a specific IP option is present

    Snort IDS/IPS Post detection options:
        logto - The logto keyword tells Snort to log all packets that trigger this rule to a special output log file.
        session - The session keyword is built to extract user data from TCP Sessions.
        react - This keyword implements an ability for users to react to traffic that matches a Snort rule by closing connection and sending a notice.
        tag - The tag keyword allow rules to log more than just the single packet that triggered the rule.
        activates - This keyword allows the rule writer to specify a rule to add when a specific network event occurs.
        activated_by - This keyword allows the rule writer to dynamically enable a rule when a specific activate rule is triggered.
        count - Allows the rule writer to specify how many packets to leave the rule enabled for after it is activated.
        
    Snort IDS/IPS Thresholding and suppression options:
        type [limit | threshold | both]
            limit alerts on the 1st event during defined period then ignores the rest.
            Threshold alerts every [x] times during defined period.
            Both alerts once per time internal after seeing [x] amount of occurrences of event. It then ignores all other events during period.
        track [by_src | by_dst] - rate is tracked either by source IP address, or destination IP address
        count [#] - number of rule matching in [s] seconds that will cause event_filter limit to be exceeded
        seconds [seconds] - time period over which count is accrued. [s] must be nonzero value
        
        
    Look for anonymous ftp traffic:
        alert tcp any any -> any 21 (msg:"Anonymous FTP Login"; content: "anonymous"; sid:2121; )
    
    This will cause the pattern matcher to start looking at byte 6 in the payload)
        alert tcp any any -> any 21 (msg:"Anonymous FTP Login"; content: "anonymous"; offset:5; sid:2121; )
    
    This will search the first 14 bytes of the packet looking for the word “anonymous”.
        alert tcp any any -> any 21 (msg:"Anonymous FTP Login"; content: "anonymous"; depth:14; sid:2121; )
    
    Deactivates the case sensitivity of a text search.
        alert tcp any any -> any 21 (msg:"Anonymous FTP Login"; content: "anonymous"; nocase; sid:2121; )
    
    ICMP ping sweep
        alert icmp any any -> 10.1.0.2 any (msg: "NMAP ping sweep Scan"; dsize:0; sid:10000004; rev: 1; )
    
    Look for a specific set of Hex bits (NoOP sled)
        alert tcp any any -> any any (msg:"NoOp sled"; content: "|9090 9090 9090|"; sid:9090; rev: 1; )
    
    Incorrect telnet login attempt
        alert tcp any 23 -> any any (msg:"TELNET login incorrect"; content:"Login incorrect"; flow:established,from_server; classtype:bad-unknown; sid:2323; rev:6; )
        
    
    
    USING SNORT
    
    cat snort.conf include /etc/snort/rules/icmp.rules
    
    snort -D  (runs in the background)
    
    sudo snort -D -l /var/log/snort/ -c /etc/snort/snort.conf (
    
    var/log/snort
    alert (contains the essage of the errors)
    snort.log.(log num) number is a time stamp
    
    tcpdump -X = header information
    tcpdump -XX = more header info
    tcpdump -XXvv = even more header information
    -r reads a file
    
    use on the snort.log
    
    
    snort a pcap
    
    snort -r <pcap name> -c <snort rules> or /etc/snort/snort.conf
    
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Failed IDS/IPS
    Fail Open, less secure, traffic continues if Ids/ips fails
    
    Fail close, more secure, ids fails, traffic stops
    
Attacking/evading IDS
    insertion attack
        IDS accepts packets, host doew not
    
    Non-technical attacks 
        attacking during periods of low manning
        
strengthening Defensive Systems
    Linking IDS/IPS to other tools
    tuning (get rid of false positives)

__________________________________________________________________________________________________________________________________________________________

FILTERING
    Email addresses - to block unwanted email and increase productivity
    Computer applications in an organization environment - for security from vulnerable software
    MAC filtering - also for security to allow only specific computers access to a network
    Network Traffic
    
    why do we filter?
        Decrease load on network infrastructure
        Ensure data flows in an efficient manner
        Ensure data gets to intended recipients and only intended recipients
        Block malicious traffic
        Obfuscate network internals
    
    PACL = Port ACL
    VACL = Virtual ACL
    
    Firewalls
        rules
        packet filtering
        Stateful
        application layer
        Next Generation
        
    implicit - not clearly stated but generally accepted
    explicit - the definite. must have. must do. must allow
    
    Network Device Operation Modes
        Routed - TTL decrements every hop, ip assigned,
        Transparent - a transparent router does not decrement a ttl, instead it passes straight through. ip is not assigned to a transparent device. this is to help obfuscate the network, more like a bump in the wire.
    IDS - out of line, watches from the side
    IPS - in line, traffic has to pass through it
    
    TRAFFIC DIRECTIONS
        Traffic originating from the localhost to the remote-host
        Return traffic from that remote-host back to the localhost.
        Traffic originating from the remote-host to the localhost
        Return traffic from the localhost back to the remote-host.


    iptables - command for IPv4 packet administration
    iptables -t [table] -A [chain] [rules] -j [action]
        -A      append a rule (bottom of list)
        -I      Insert a rule ( top of the list)
        -D      Delete a rule
        -t      specify a specific table (nat, mangle, etc)
        -j      jump to target action
        
    ****do not flush before setting default to accept all!****
    Flush table
        iptables -t [table] -F
    Change default policy
        iptables -t [table] -P [chain] [action]
    Lists rules with rule numbers
        iptables -t [table] -L --line-numbers
    Lists rules as commands interpreted by the system
        iptables -t [table] -S
    Inserts rule before Rule number
        iptables -t [table] -I [chain] [rule num] [rules] -j [action]
    Deletes rule at number
        iptables -t [table] -D [chain] [rule num]


    NFTABLES
        need to be built from scratch
    specify the table type
    specify the chain
    specify the hooks
    
    STEP 1
        nft add table [family] [table]
            [family] = ip, ip6, inet, arp, bridge and netdev.
            [table] = user provided name for the table.
            
    STEP 2
        nft add chain [family] [table] [chain] { type [type] hook [hook]
        priority [priority] \; policy [policy] \;}
       
            [chain] = User defined name for the chain.
            [type] =  can be filter, route or nat.
            [hook] = prerouting, ingress, input, forward, output or
                     postrouting.
            [priority] = user provided integer. Lower number = higher
                         priority. default = 0. Use "--" before
                         negative numbers.
            ; [policy] ; = set policy for the chain. Can be
                          accept (default) or drop.
             Use "\" to escape the ";" in bash 
    
    STEP 3
        nft add rule [family] [table] [chain] [matches (matches)] [statement]
        
            [matches] = typically protocol headers(i.e. ip, ip6, tcp,
                udp, icmp, ether, etc)
            (matches) = these are specific to the [matches] field.
            [statement] = action performed when packet is matched. Some
                          examples are: log, accept, drop, reject,
                          counter, nat (dnat, snat, masquerade)

    MODIFY NFTABLES
    
        nft {list | flush} ruleset
        nft {delete | list | flush } table [family] [table]
        nft {delete | list | flush } chain [family] [table] [chain]
        
        nft list table [family] [table] [-a]

    Adds after position
        nft add rule [family] [table] [chain] [position <position>] [matches (matches)] [statement]
    
    Inserts before position
        nft insert rule [family] [table] [chain] [position <position>] [matches (matches)] [statement]
    
    Replaces rule at handle
        nft replace rule [family] [table] [chain] [handle <handle>] [matches (matches)] [statement]

    Deletes rule at handle
        nft delete rule [family] [table] [chain] [handle <handle>]
        
        
        
        PRACTICE STUFF
            
            LIST FILTER TABLES
                sudo iptables -L
                sudo iptables -L --line
                    shows line number
                sudo iptables -L -v 
                    metrics for nerds (Me I guess)
            Flush the default tables
                sudo iptables -F
            
            explicit accept
                sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
                sudo iptables -A INPUT -p tcp --sport 22 -j ACCEPT
                sudo iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT
                sudo iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT
                    -A append
                    -p protocol
                    --sport = source
                    --dport = dest
                    -j jump action
                
            set policy to drop input traffic
                sudo iptables -P INPUT DROP
                    change the policy between accept/dent/ drop
            
            allow specific ports
                sudo iptables -A INPUT -p tcp -m multiport --ports 22,6010,6011,6012 -m state --state NEW,ESTABLISHED -j ACCEPT
                    -m match
                    --state = NEW, ESTABLISHED
            
            delete a rule
                sudo iptables -D OUTPUT 4
                    4th line in the output chain
                    -D = delete
            
            set policy to drop
                sudo iptables -P FORWARD  DROP
            
            deny an ip
                sudo iptables -I INPUT -s 172.16.82.106 -j DROP
                sudo iptables -I OUTPUT -d 172.16.82.106 -j DROP
                
                -I inserts at top of list
                -s source ip
                -d destination ip
            
            accept an ip
                sudo iptables -A OUTPUT -d 172.16.82.112 -j ACCEPT
                sudo iptables -A INPUT -s 172.16.82.112 -j ACCEPT
                
            
